import { defineStore } from 'pinia';
import { uniqueId } from 'lodash';
<% if (components === 'element') { -%>
import { ElNotification } from 'element-plus';
import { INotificationOptions } from 'element-plus/lib/el-notification/src/notification.type.d';
<% } -%>

<% if (components === 'element') { -%>
  import { Notification } from 'ant-design-vue';
  import { notification } from 'ant-design-vue';
  import { NotificationArgsProps } from 'ant-design-vue/lib/notification/index';
<% } -%>

interface ErrorLog {
  id: string;
  time: Date;
  error: Error;
}

export interface LogState {
  errorLogs: ErrorLog[];
}

export const useLogStore = defineStore({
  id: 'log',
  state: (): LogState => ({
    errorLogs: [],
  }),
  actions: {
    // 向 ErrorLogs 列表中加入新的日志信息，并记录时间
    addErrorLogs(payload: Error) {
      this.errorLogs.push({
        id: uniqueId('error'),
        time: new Date(),
        error: payload,
      });
    },
    // 清空 ErrorLogs
    clearErrorLogs() {
      this.errorLogs = [];
    },
    // 消息提示
    <% if (components === 'element') { -%>
    notification(payload: string | Error | INotificationOptions) {
      if (typeof payload === 'string') {
        Notification({
          type: 'success',
          message: payload,
        });
      } else if (typeof payload === 'object') {
        if (payload instanceof Error) {
          const { message } = payload;
          this.addErrorLogs(payload);
          Notification({
            type: 'error',
            message,
          });
        } else {
          Notification(payload);
        }
      }
    },
    <% } -%>

    <% if (components === 'antd') { -%>
      // 消息提示
      notifications(payload: string | Error | NotificationArgsProps) {
        if (typeof payload === 'string') {
          notification.success({
            message: payload,
          });
        } else if (typeof payload === 'object') {
          if (payload instanceof Error) {
            const { message } = payload;
            notification.error({
              message,
            });
          } else {
            let type;
            if (payload.type === undefined) {
              type = 'success';
            } else {
              type = payload.type;
            }
            notification[type](payload);
          }
        }
      },
    <% } -%>  
  },
});
