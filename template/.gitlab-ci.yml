variables:
  DEPLOY_FILE_WEB_PATH: /home/docker/minio/data/deploy-web
  DEPLOY_FILE: $DEPLOY_FILE_WEB_PATH/$CI_PROJECT_PATH/$CI_COMMIT_REF_SLUG/$CI_COMMIT_TIMESTAMP
  WEBAPPS: /home/http_service/tomcat/webapps #发布服务器地址
  PROJECT: $WEBAPPS/$CI_PROJECT_NAME #发布服务目录
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
stages:
  - test
  - build
  - deploy-test
  - deploy
sonarqube:
  stage: test
  script:
    - echo 'sonarqube'
  only:
    refs:
      - tags
    variables:
      - $CI_PROJECT_NAMESPACE == "root"
  tags:
    - sonarqube
test:
  stage: test
  script:
    - echo 'Lints and fixes files'
    - 'sudo npm install'
    - 'yarn lint'
  only:
    - merge_requests
    - tags
  tags:
    - sonarqube
build:
  stage: build
  script:
    - echo 'build'
    - 'sudo npm install'
    - 'npm run build:test'
  artifacts:
    paths:
      - dist/*
  only:
    refs:
      - merge_requests
    variables:
      - $CI_PROJECT_NAMESPACE == "root"
  tags:
    - build
deploy-test:
  stage: deploy-test
  script:
    - echo "I am deploy"
    - if [ ! -d $PROJECT ]; then mkdir -p $PROJECT;echo "mkdir ${PROJECT}"; else rm -rf ${PROJECT}/* ;echo "rm ${PROJECT}"; fi #如果目录不存在创建否则删除
    - echo $PROJECT
    - mv dist/* $PROJECT #部署文件
    - echo ${TOMCAT_URL}/${PROJECT}
  only:
    refs:
      - merge_requests
    variables:
      - $CI_PROJECT_NAMESPACE == "root"
  tags:
    - deploy-test
  when: manual
deploy:
  stage: deploy
  script:
    - echo 'deploy'
    - 'sudo npm install'
    - 'npm run build'
    - 'tar   -zcvf   dist.tar.gz   dist/'
    - echo $DEPLOY_FILE
    - mkdir -p $DEPLOY_FILE
    - cp -rf dist.tar.gz $DEPLOY_FILE/
  only:
    refs:
      - tags
    variables:
      - $CI_PROJECT_NAMESPACE == "root"
  tags:
    - deploy
  when: manual
