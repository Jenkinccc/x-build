(self.webpackChunk=self.webpackChunk||[]).push([[408],{77266:function(a,s,n){"use strict";n.r(s),n.d(s,{data:function(){return e}});const e={key:"v-0593c586",path:"/Guide/Basics/DB.html",title:"数据持久化",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"使用方式",slug:"使用方式",children:[{level:3,title:"set",slug:"set",children:[]},{level:3,title:"setAll",slug:"setall",children:[]},{level:3,title:"get",slug:"get",children:[]},{level:3,title:"getAll",slug:"getall",children:[]},{level:3,title:"clear",slug:"clear",children:[]},{level:3,title:"keys",slug:"keys",children:[]},{level:3,title:"has",slug:"has",children:[]},{level:3,title:"remove",slug:"remove",children:[]},{level:3,title:"forEach",slug:"foreach",children:[]}]}],filePathRelative:"Guide/Basics/DB.md",git:{updatedTime:1624865896e3,contributors:[]}}},50081:function(a,s,n){"use strict";n.r(s),n.d(s,{default:function(){return d}});var e=n(66252);const t=(0,e.Wm)("h1",{id:"数据持久化",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#数据持久化","aria-hidden":"true"},"#"),(0,e.Uk)(" 数据持久化")],-1),l=(0,e.Uk)("默认已经将 "),p={href:"https://github.com/marcuswestin/store.js",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("store.js"),i=(0,e.Uk)(" 安装到脚手架中，直接使用即可。数据持久化依赖浏览器的 "),r=(0,e.Wm)("strong",null,"LocalStorage",-1),o=(0,e.Uk)("，使用 store.js API 实现了便捷的的操作和取值方法。"),u=(0,e.uE)('<h2 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式</h2><p>store.js 是一个实现了浏览器的本地存储的 JavaScript 封装 API，不是通过 Cookie 和 Flash 技术实现，而是使用 localStorage，下面列举一下常用的接口：</p><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> set</h3><p>单个存储或删除字符串数据</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>store<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">,</span> overwrite<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="setall" tabindex="-1"><a class="header-anchor" href="#setall" aria-hidden="true">#</a> setAll</h3><p>批量存储多个字符串数据</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>store<span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">,</span> overwrite<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="get" tabindex="-1"><a class="header-anchor" href="#get" aria-hidden="true">#</a> get</h3><p>获取key的字符串数据</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>store<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token punctuation">,</span> alt<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="getall" tabindex="-1"><a class="header-anchor" href="#getall" aria-hidden="true">#</a> getAll</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>store<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="clear" tabindex="-1"><a class="header-anchor" href="#clear" aria-hidden="true">#</a> clear</h3><p>清空所有key/data</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>store<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="keys" tabindex="-1"><a class="header-anchor" href="#keys" aria-hidden="true">#</a> keys</h3><p>返回所有key的数组</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>store<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="has" tabindex="-1"><a class="header-anchor" href="#has" aria-hidden="true">#</a> has</h3><p>判断是否存在返回true/false</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>store<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="remove" tabindex="-1"><a class="header-anchor" href="#remove" aria-hidden="true">#</a> remove</h3><p>删除key包括key的字符串数据</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>store<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach" aria-hidden="true">#</a> forEach</h3><p>循环遍历，返回false结束遍历;</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>store<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',28);var d={render:function(a,s){const n=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,(0,e.Wm)("p",null,[l,(0,e.Wm)("a",p,[c,(0,e.Wm)(n)]),i,r,o]),u],64)}}}}]);