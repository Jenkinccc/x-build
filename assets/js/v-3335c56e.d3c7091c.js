(self.webpackChunk=self.webpackChunk||[]).push([[6641],{59538:function(e,a,i){"use strict";i.r(a),i.d(a,{data:function(){return l}});const l={key:"v-3335c56e",path:"/Standard/Test.html",title:"测试规范",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"单元测试",slug:"单元测试",children:[]},{level:2,title:"组件测试",slug:"组件测试",children:[]},{level:2,title:"交互测试",slug:"交互测试",children:[]},{level:2,title:"接口调试",slug:"接口调试",children:[]},{level:2,title:"BUG 测试",slug:"bug-测试",children:[]}],filePathRelative:"Standard/Test.md",git:{updatedTime:1624865896e3,contributors:[]}}},56392:function(e,a,i){"use strict";i.r(a),i.d(a,{default:function(){return r}});const l=(0,i(66252).uE)('<h1 id="测试规范" tabindex="-1"><a class="header-anchor" href="#测试规范" aria-hidden="true">#</a> 测试规范</h1><h2 id="单元测试" tabindex="-1"><a class="header-anchor" href="#单元测试" aria-hidden="true">#</a> 单元测试</h2><ul><li>所有写单元测试的文件名必须是 <code>***.spec.js</code> 的格式。</li><li>所有的测试用例应确保最大化的覆盖率。</li></ul><h2 id="组件测试" tabindex="-1"><a class="header-anchor" href="#组件测试" aria-hidden="true">#</a> 组件测试</h2><p>组件测试不强制要求写测试用例，因为组件测试用例写起来难度较大，更不需要追求 100% 覆盖率，量力而为。</p><h2 id="交互测试" tabindex="-1"><a class="header-anchor" href="#交互测试" aria-hidden="true">#</a> 交互测试</h2><p>测试项目各类交互逻辑是否符合预期，交互体验是否符合要求。</p><h2 id="接口调试" tabindex="-1"><a class="header-anchor" href="#接口调试" aria-hidden="true">#</a> 接口调试</h2><ul><li>接口参数、格式与返回内容是否符合预期。</li><li>业务对接口的调用，以及对返回的内容的解析和使用逻辑是否正常。</li><li>区分开发环境与生产环境的API 接口地址。</li></ul><h2 id="bug-测试" tabindex="-1"><a class="header-anchor" href="#bug-测试" aria-hidden="true">#</a> BUG 测试</h2><ul><li>显示逻辑和交互逻辑是否存在bug。</li><li>代码语法逻辑是否存在bug。</li><li>模块、组件逻辑是否存在bug。</li><li>错误处理是否恰当，是否有所遗漏。</li></ul>',11);var r={render:function(e,a){return l}}}}]);