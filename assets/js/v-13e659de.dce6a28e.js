(self.webpackChunk=self.webpackChunk||[]).push([[5476],{38365:function(n,s,a){"use strict";a.r(s),a.d(s,{data:function(){return e}});const e={key:"v-13e659de",path:"/Guide/Basics/Mock.html",title:"Mock 数据",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"使用方式",slug:"使用方式",children:[]},{level:2,title:"示例模板",slug:"示例模板",children:[]},{level:2,title:"配置文件",slug:"配置文件",children:[]},{level:2,title:"常见问题",slug:"常见问题",children:[{level:3,title:"1.GET 请求如何拦截携带 query 的请求？",slug:"_1-get-请求如何拦截携带-query-的请求",children:[]},{level:3,title:"2.POST 请求如何获得请求体的信息？",slug:"_2-post-请求如何获得请求体的信息",children:[]},{level:3,title:"3.创建好配置文件后如何引用？",slug:"_3-创建好配置文件后如何引用",children:[]},{level:3,title:"4.项目上线后，如何删除 Mock 功能？",slug:"_4-项目上线后-如何删除-mock-功能",children:[]}]}],filePathRelative:"Guide/Basics/Mock.md",git:{updatedTime:1624865896e3,contributors:[]}}},37633:function(n,s,a){"use strict";a.r(s),a.d(s,{default:function(){return E}});var e=a(66252);const p=(0,e.Wm)("h1",{id:"mock-数据",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#mock-数据","aria-hidden":"true"},"#"),(0,e.Uk)(" Mock 数据")],-1),t=(0,e.Wm)("p",null,[(0,e.Wm)("code",null,"v1.1.9 新增")],-1),o=(0,e.Uk)("Mock 数据功能是基于 "),c={href:"http://mockjs.com/",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("mock.js"),r=(0,e.Uk)(" 开发，支持通过 webpack 进行自动加载 mock 配置文件。"),u=(0,e.uE)('<h2 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式</h2><ul><li>所有的 mock 配置文件均应放置在 <code>@/mock/services</code> 路径内。</li><li>在 <code>@/mock/services</code> 内部可以建立业务相关的文件夹分类存放配置文件。</li><li>所有的配置文件应按照 <code>***.mock.js</code> 的命名规范创建。</li><li>配置文件使用 ES6 Module 导出 <code>export default</code> 或 <code>export</code> 一个数组。</li></ul><h2 id="示例模板" tabindex="-1"><a class="header-anchor" href="#示例模板" aria-hidden="true">#</a> 示例模板</h2><p>示例模板 <code>@/mock/service/example.mock.js</code> 已经内置于脚手架内，可以直接修改使用或作为参考：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> Mock <span class="token keyword">from</span> <span class="token string">&#39;mockjs&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> Random <span class="token punctuation">}</span> <span class="token operator">=</span> Mock<span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>\n  <span class="token function">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;/example.*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token string">&#39;range|50-100&#39;</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;data|10&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token comment">// 唯一 ID</span>\n        id<span class="token operator">:</span> <span class="token string">&#39;@guid()&#39;</span><span class="token punctuation">,</span>\n        <span class="token comment">// 生成一个中文名字</span>\n        cname<span class="token operator">:</span> <span class="token string">&#39;@cname()&#39;</span><span class="token punctuation">,</span>\n        <span class="token comment">// 生成一个 url</span>\n        url<span class="token operator">:</span> <span class="token string">&#39;@url()&#39;</span><span class="token punctuation">,</span>\n        <span class="token comment">// 生成一个地址</span>\n        county<span class="token operator">:</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">&#39;@county(true)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token comment">// 从数组中随机选择一个值</span>\n        <span class="token string">&#39;array|1&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token comment">// 随机生成一个时间</span>\n        time<span class="token operator">:</span> <span class="token string">&#39;@datetime()&#39;</span><span class="token punctuation">,</span>\n        <span class="token comment">// 生成一张图片</span>\n        image<span class="token operator">:</span> Random<span class="token punctuation">.</span><span class="token function">dataImage</span><span class="token punctuation">(</span><span class="token string">&#39;200x100&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Mock Image&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><p>配置文件是由一个长度为 <code>3</code> 的<strong>数组</strong>构成：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span>url<span class="token punctuation">,</span> method<span class="token punctuation">,</span> template<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><strong>url</strong> <code>String</code> 表示需要拦截的 URL，可以是 URL 字符串或 URL 正则。</li><li><strong>method</strong> <code>String</code> 表示需要拦截的 Ajax 请求类型。例如 get、post、put、delete 等。</li><li><strong>template</strong> <code>String | Object | Function</code> 表示数据模板，可以是字符串、对象或者一个函数。</li></ul>',9),i=(0,e.Uk)("关于 "),k=(0,e.Wm)("strong",null,"template",-1),d=(0,e.Uk)(" 的配置方式，参考 mock.js "),m={href:"https://github.com/nuysoft/Mock/wiki",target:"_blank",rel:"noopener noreferrer"},b=(0,e.Uk)("文档"),g=(0,e.Uk)(" 或 "),h={href:"http://mockjs.com/examples.html",target:"_blank",rel:"noopener noreferrer"},f=(0,e.Uk)("示例"),v=(0,e.Uk)("。"),x=(0,e.uE)('<h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><h3 id="_1-get-请求如何拦截携带-query-的请求" tabindex="-1"><a class="header-anchor" href="#_1-get-请求如何拦截携带-query-的请求" aria-hidden="true">#</a> 1.GET 请求如何拦截携带 query 的请求？</h3><p>Mock.js 对 query 没有做处理，但是可以通过正则的方式进行匹配，例如：<code>RegExp(&#39;/example.*&#39;)</code>。</p><h3 id="_2-post-请求如何获得请求体的信息" tabindex="-1"><a class="header-anchor" href="#_2-post-请求如何获得请求体的信息" aria-hidden="true">#</a> 2.POST 请求如何获得请求体的信息？</h3><p>template 配置时使用函数的形式，函数附带一个 options 参数，可以获得请求题的信息。</p><h3 id="_3-创建好配置文件后如何引用" tabindex="-1"><a class="header-anchor" href="#_3-创建好配置文件后如何引用" aria-hidden="true">#</a> 3.创建好配置文件后如何引用？</h3>',6),j=(0,e.Uk)("只要按照规范创建配置文件，脚手架会自动引入配置文件，并自动使用 mock.js 加载配置。这步节省时间的操作是通过 "),y=(0,e.Wm)("strong",null,"webpack",-1),M=(0,e.Uk)(),U={href:"https://webpack.docschina.org/api/module-methods/#requirecontext",target:"_blank",rel:"noopener noreferrer"},W=(0,e.Uk)("require.context"),_=(0,e.Uk)(" 实现的："),w=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> Mock <span class="token keyword">from</span> <span class="token string">&#39;mockjs&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> context <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">&#39;./services&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.mock.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncontext<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token function">context</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_4-项目上线后-如何删除-mock-功能" tabindex="-1"><a class="header-anchor" href="#_4-项目上线后-如何删除-mock-功能" aria-hidden="true">#</a> 4.项目上线后，如何删除 Mock 功能？</h3><p>Mock 功能开启的时候，会拦截所有的请求，也就是你<strong>无法进行服务端请求</strong>。Mock 在 <code>@/main.js</code> 中引入，你可以查看该文件的源代码，并找到 <code>import &#39;@/mock&#39;</code> 这样的代码。（去除它 可完整的将项目中的 mock 拦截去除）</p>',3);var E={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,t,(0,e.Wm)("p",null,[o,(0,e.Wm)("a",c,[l,(0,e.Wm)(a)]),r]),u,(0,e.Wm)("p",null,[i,k,d,(0,e.Wm)("a",m,[b,(0,e.Wm)(a)]),g,(0,e.Wm)("a",h,[f,(0,e.Wm)(a)]),v]),x,(0,e.Wm)("p",null,[j,y,M,(0,e.Wm)("a",U,[W,(0,e.Wm)(a)]),_]),w],64)}}}}]);