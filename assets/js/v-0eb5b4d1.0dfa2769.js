(self.webpackChunk=self.webpackChunk||[]).push([[8478],{28046:function(e,a,i){"use strict";i.r(a),i.d(a,{data:function(){return r}});const r={key:"v-0eb5b4d1",path:"/Guide/Basics/Routes.html",title:"路由&页面",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"配置",slug:"配置",children:[]},{level:2,title:"分类",slug:"分类",children:[]},{level:2,title:"meta",slug:"meta",children:[{level:3,title:"auth",slug:"auth",children:[]},{level:3,title:"permissions",slug:"permissions",children:[]}]},{level:2,title:"页面开发",slug:"页面开发",children:[]}],filePathRelative:"Guide/Basics/Routes.md",git:{updatedTime:1624865896e3,contributors:[]}}},17985:function(e,a,i){"use strict";i.r(a),i.d(a,{default:function(){return t}});const r=(0,i(66252).uE)('<h1 id="路由-页面" tabindex="-1"><a class="header-anchor" href="#路由-页面" aria-hidden="true">#</a> 路由&amp;页面</h1><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><p>在 @/router/routes 中配置路由</p><h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h2><p>路由分为3类：<code>frameIn</code>, <code>frameOut</code>, <code>errorPage</code></p><p>frameIn：基于 <code>BasicLayout</code>，通常需要登录或权限认证的路由。</p><p>frameOut：不需要动态判断权限的路由，如登录页或通用页面。</p><p>errorPage：例如404。</p><h2 id="meta" tabindex="-1"><a class="header-anchor" href="#meta" aria-hidden="true">#</a> meta</h2><p>在路由中，集成了权限验证的功能，需要为页面增加权限时，请在 meta 下添加相应的 key：</p><h3 id="auth" tabindex="-1"><a class="header-anchor" href="#auth" aria-hidden="true">#</a> auth</h3><ul><li>类型：Boolean</li><li>说明：当 auth 为 true 时，此页面需要进行登陆权限验证，只针对 frameIn 路由有效。</li></ul><h3 id="permissions" tabindex="-1"><a class="header-anchor" href="#permissions" aria-hidden="true">#</a> permissions</h3><ul><li>类型：Object</li><li>说明：permissions 每一个 key 对应权限功能的验证，当 key 的值为 true 时，代表具有权限，若 key 为 false，配合 <code>v-permission</code> 指令，可以隐藏相应的 DOM。</li></ul><h2 id="页面开发" tabindex="-1"><a class="header-anchor" href="#页面开发" aria-hidden="true">#</a> 页面开发</h2><ul><li>根据业务需要划分，按照路由层级在 views 中创建相对应的页面组件，以文件夹的形式创建，并在文件夹内创建 index.vue 文件作为页面的入口文件。</li><li>页面内的组件：在页面文件夹下创建 components 文件夹，在其内部对应创建相应的组件文件，如果是复杂组件，应以文件夹的形式创建组件。</li><li>工具模块：能够高度抽象的工具模块，应创建在 @/src/libs 内创建 js 文件。</li></ul>',16);var t={render:function(e,a){return r}}}}]);