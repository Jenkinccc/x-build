(self.webpackChunk=self.webpackChunk||[]).push([[7072],{52861:function(e,l,i){"use strict";i.r(l),i.d(l,{data:function(){return a}});const a={key:"v-00451422",path:"/Standard/CSS.html",title:"CSS 规范",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"降低选择器复杂性",slug:"降低选择器复杂性",children:[]},{level:2,title:"选择器优先级",slug:"选择器优先级",children:[]},{level:2,title:"使用 flexbox",slug:"使用-flexbox",children:[]},{level:2,title:"动画性能优化",slug:"动画性能优化",children:[]},{level:2,title:"属性值",slug:"属性值",children:[]},{level:2,title:"字体排版",slug:"字体排版",children:[]}],filePathRelative:"Standard/CSS.md",git:{updatedTime:1624865896e3,contributors:[]}}},63201:function(e,l,i){"use strict";i.r(l),i.d(l,{default:function(){return n}});const a=(0,i(66252).uE)('<h1 id="css-规范" tabindex="-1"><a class="header-anchor" href="#css-规范" aria-hidden="true">#</a> CSS 规范</h1><h2 id="降低选择器复杂性" tabindex="-1"><a class="header-anchor" href="#降低选择器复杂性" aria-hidden="true">#</a> 降低选择器复杂性</h2><p>浏览器读取选择器，遵循的原则是从选择器的右边到左边读取。</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">#block .text p</span> <span class="token punctuation">{</span>\n\t<span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>查找所有 P 元素。</li><li>查找结果 1 中的元素是否有类名为 text 的父元素</li><li>查找结果 2 中的元素是否有 id 为 block 的父元素</li></ul><h2 id="选择器优先级" tabindex="-1"><a class="header-anchor" href="#选择器优先级" aria-hidden="true">#</a> 选择器优先级</h2><blockquote><p>内联 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器</p></blockquote><ul><li>选择器越短越好。</li><li>尽量使用高优先级的选择器，例如 ID 和类选择器。</li><li>避免使用通配符 *。</li></ul><h2 id="使用-flexbox" tabindex="-1"><a class="header-anchor" href="#使用-flexbox" aria-hidden="true">#</a> 使用 flexbox</h2><p>在早期的 CSS 布局方式中我们能对元素实行绝对定位、相对定位或浮动定位。而现在，我们有了新的布局方式 flexbox，它比起早期的布局方式来说有个优势，那就是性能比较好。不过 flexbox 兼容性还是有点问题，不是所有浏览器都支持它，所以要谨慎使用。 各浏览器兼容性：</p><ul><li>Chrome 29+</li><li>Firefox 28+</li><li>Internet Explorer 11</li><li>Opera 17+</li><li>Safari 6.1+ (prefixed with -webkit-)</li><li>Android 4.4+</li><li>iOS 7.1+ (prefixed with -webkit-)</li></ul><h2 id="动画性能优化" tabindex="-1"><a class="header-anchor" href="#动画性能优化" aria-hidden="true">#</a> 动画性能优化</h2><p>在 CSS 中，transforms 和 opacity 这两个属性更改不会触发重排与重绘，它们是可以由合成器（composite）单独处理的属性。</p><h2 id="属性值" tabindex="-1"><a class="header-anchor" href="#属性值" aria-hidden="true">#</a> 属性值</h2><ul><li>当数值为 0 - 1 之间的小数时，建议省略整数部分的 0。</li><li>当长度为 0 时建议省略单位。</li><li>建议不使用命名色值。</li><li>建议当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置 clear 或触发 BFC 的方式进行 clearfix。尽量不使用增加空标签的方式。</li><li>除公共样式之外，在业务代码中尽量不能使用 !important。</li><li>建议将 z-index 进行分层，对文档流外绝对定位元素的视觉层级关系进行管理。</li></ul><h2 id="字体排版" tabindex="-1"><a class="header-anchor" href="#字体排版" aria-hidden="true">#</a> 字体排版</h2><ul><li>字号应不小于 12px（PC端）。</li><li>font-weight 属性建议使用数值方式描述。</li><li>line-height 在定义文本段落时，应使用数值。</li></ul>',17);var n={render:function(e,l){return a}}}}]);