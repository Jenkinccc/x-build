(self.webpackChunk=self.webpackChunk||[]).push([[661],{83920:function(e,i,l){"use strict";l.r(i),l.d(i,{data:function(){return a}});const a={key:"v-54216ed6",path:"/Standard/StyleGuide.html",title:"风格指南",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"项目命名",slug:"项目命名",children:[]},{level:2,title:"目录命名",slug:"目录命名",children:[]},{level:2,title:"命名严谨性",slug:"命名严谨性",children:[]},{level:2,title:"组件",slug:"组件",children:[]},{level:2,title:"JS 文件",slug:"js-文件",children:[]},{level:2,title:"页面 Views",slug:"页面-views",children:[]},{level:2,title:"注释",slug:"注释",children:[]}],filePathRelative:"Standard/StyleGuide.md",git:{updatedTime:1624865896e3,contributors:[]}}},85659:function(e,i,l){"use strict";l.r(i),l.d(i,{default:function(){return v}});var a=l(66252);const s=(0,a.Wm)("h1",{id:"风格指南",tabindex:"-1"},[(0,a.Wm)("a",{class:"header-anchor",href:"#风格指南","aria-hidden":"true"},"#"),(0,a.Uk)(" 风格指南")],-1),t=(0,a.Uk)("x-build 的风格指南主要是参照 vue 官方的"),n={href:"https://cn.vuejs.org/v2/style-guide/index.html",target:"_blank",rel:"noopener noreferrer"},r=(0,a.Uk)("风格指南"),d=(0,a.Uk)("。"),u=(0,a.uE)('<h2 id="项目命名" tabindex="-1"><a class="header-anchor" href="#项目命名" aria-hidden="true">#</a> 项目命名</h2><p>全部采用小写方式，以中划线分隔。</p><details class="custom-container details"><summary>查看示例</summary><ul><li>x-build</li></ul></details><h2 id="目录命名" tabindex="-1"><a class="header-anchor" href="#目录命名" aria-hidden="true">#</a> 目录命名</h2><p>全部采用小写方式，以中划线分隔，有复数结构时，要采用复数命名法，缩写不用复数。</p><details class="custom-container details"><summary>查看示例</summary><ul><li>styles</li><li>demo-styles</li></ul></details><h2 id="命名严谨性" tabindex="-1"><a class="header-anchor" href="#命名严谨性" aria-hidden="true">#</a> 命名严谨性</h2><p>代码中的命名严禁使用拼音，一律使用英文。</p><ul><li>使用有意义，可读性好的变量名。</li><li>使用易于检索名称，例如常量需要定义全大写以下划线拼接的变量名。</li></ul><h2 id="组件" tabindex="-1"><a class="header-anchor" href="#组件" aria-hidden="true">#</a> 组件</h2>',10),c=(0,a.Uk)("所有的Component文件都是以大写开头 (PascalCase)，这也是"),h={href:"https://cn.vuejs.org/v2/style-guide/index.html#%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6%E6%96%87%E4%BB%B6%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E5%BC%BA%E7%83%88%E6%8E%A8%E8%8D%90",target:"_blank",rel:"noopener noreferrer"},o=(0,a.Uk)("官方"),m=(0,a.Uk)("所推荐的。"),p=(0,a.uE)('<p>排除 index.vue 和 内置组件 wm-***。</p><details class="custom-container details"><summary>查看示例</summary><ul><li>@/components/BackToTop/index.vue</li><li>@/components/Charts/Line.vue</li><li>@/views/example/components/Button.vue</li></ul></details><h2 id="js-文件" tabindex="-1"><a class="header-anchor" href="#js-文件" aria-hidden="true">#</a> JS 文件</h2><p>所有的.js文件都遵循横线连接 (kebab-case)。</p><details class="custom-container details"><summary>查看示例</summary><ul><li>@/utils/open-window.js</li><li>@/views/svg-icons/require-icons.js</li><li>@/components/MarkdownEditor/default-options.js</li></ul></details><h2 id="页面-views" tabindex="-1"><a class="header-anchor" href="#页面-views" aria-hidden="true">#</a> 页面 Views</h2><p>在views文件下，代表路由的.vue文件都使用横线连接 (kebab-case)，代表路由的文件夹也是使用同样的规则。</p><details class="custom-container details"><summary>查看示例</summary><ul><li>@/views/svg-icons/index.vue</li><li>@/views/svg-icons/require-icons.js</li></ul></details><p>使用横线连接 (kebab-case)来命名views主要是出于以下几个考虑。</p><ul><li>横线连接 (kebab-case) 是官方推荐的命名规范</li><li>views 下的.vue文件代表的是一个路由，所以它需要和component进行区分(component 都是大写开头)</li><li>页面的url 也都是横线连接的，比如https://www.xxx.com/xxx，所以路由对应的view应该要保持统一</li><li>没有大小写敏感问题</li></ul><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h2><ul><li>只对存在一定业务逻辑复杂性的代码进行注释。</li><li>不要在代码库中遗留被注释掉的代码。</li></ul>',12);var v={render:function(e,i){const l=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.j4)(a.HY,null,[s,(0,a.Wm)("p",null,[t,(0,a.Wm)("a",n,[r,(0,a.Wm)(l)]),d]),u,(0,a.Wm)("p",null,[c,(0,a.Wm)("a",h,[o,(0,a.Wm)(l)]),m]),p],64)}}}}]);