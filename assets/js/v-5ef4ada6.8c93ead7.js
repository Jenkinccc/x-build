(self.webpackChunk=self.webpackChunk||[]).push([[7020],{12:function(n,s,a){"use strict";a.r(s),a.d(s,{data:function(){return e}});const e={key:"v-5ef4ada6",path:"/guide/core/hooks.html",title:"Hooks",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"使用",slug:"使用",children:[]},{level:2,title:"对象用法",slug:"对象用法",children:[]}],filePathRelative:"guide/core/hooks.md",git:{updatedTime:162484849e4,contributors:[]}}},61:function(n,s,a){"use strict";a.r(s),a.d(s,{default:function(){return l}});var e=a(6252);const t=(0,e.Wm)("h1",{id:"hooks",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#hooks","aria-hidden":"true"},"#"),(0,e.Uk)(" Hooks")],-1),p=(0,e.Wm)("p",null,"Hooks 是一个基于 Composition API 的实用函数集合，使用 typescript 开发，有着良好的代码提示体验。",-1),o=(0,e.Uk)("在开始之前，我们假设您已经熟悉 "),c={href:"https://v3.cn.vuejs.org/guide/composition-api-introduction.html",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("Vue 3 Composition API"),u=(0,e.Uk)(" 的基本思想。如果你掌握 React 及 React Hooks 基础用法。那么这对你来说是十分友好的。"),r=(0,e.uE)('<h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><p>Hooks 中的大多数函数都返回一个 refs 对象或函数，你可以使用 ES6 的解构语法来获取你需要的内容。</p><p>你只需要在 <code>@/hooks</code> 中引入它即可：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> useDevice <span class="token keyword">from</span> <span class="token string">&#39;@/hooks/useDevice&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> deviceType<span class="token punctuation">,</span> deviceOrientation<span class="token punctuation">,</span> deviceOs <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useDevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> deviceType<span class="token punctuation">,</span> deviceOrientation<span class="token punctuation">,</span> deviceOs <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="对象用法" tabindex="-1"><a class="header-anchor" href="#对象用法" aria-hidden="true">#</a> 对象用法</h2><p>如果您更喜欢将它们用作对象属性样式，则可以使用reactive(). 例如：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">const</span> device <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token function">useDevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div>',7);var l={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,p,(0,e.Wm)("blockquote",null,[(0,e.Wm)("p",null,[o,(0,e.Wm)("a",c,[i,(0,e.Wm)(a)]),u])]),r],64)}}}}]);