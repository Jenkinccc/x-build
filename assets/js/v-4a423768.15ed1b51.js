(self.webpackChunk=self.webpackChunk||[]).push([[2252],{99704:function(e,i,l){"use strict";l.r(i),l.d(i,{data:function(){return r}});const r={key:"v-4a423768",path:"/Standard/Vue.html",title:"Vue 代码规范",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"数据",slug:"数据",children:[]},{level:2,title:"v-for",slug:"v-for",children:[]},{level:2,title:"其他",slug:"其他",children:[]}],filePathRelative:"Standard/Vue.md",git:{updatedTime:1624865896e3,contributors:[]}}},74258:function(e,i,l){"use strict";l.r(i),l.d(i,{default:function(){return t}});const r=(0,l(66252).uE)('<h1 id="vue-代码规范" tabindex="-1"><a class="header-anchor" href="#vue-代码规范" aria-hidden="true">#</a> Vue 代码规范</h1><h2 id="数据" tabindex="-1"><a class="header-anchor" href="#数据" aria-hidden="true">#</a> 数据</h2><ul><li>当在组件中使用 data 属性的时候 (除了 new Vue 外的任何地方)，它的值必须是返回一个对象的函数 <code>data() { return {...} }</code>。</li><li>prop 的定义应该尽量详细，至少需要指定其类型。</li><li>布尔类型的 attribute， 为 true 时直接写属性值。</li><li>不要在computed中对vue变量进行操作。</li><li>应该优先通过 prop 和事件进行父子组件之间的通信，而不是 this.$parent 或改变 prop。</li></ul><h2 id="v-for" tabindex="-1"><a class="header-anchor" href="#v-for" aria-hidden="true">#</a> v-for</h2><ul><li>在组件上总是必须用 key 配合 v-for，以便维护内部组件及其子树的状态。</li><li>v-if 和 v-for 不能同时使用</li></ul><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><ul><li>公共方法尽量不要挂到原型上, 可以写在 utils 文件，也可以使用 mixin 文件。不要将业务公共组件注册到全局。</li><li>不要将任何第三方插件挂载到 vue 原型上。</li><li>具有高度通用性的方法，要封装到 libs、全局组件或指令集里。</li><li>为组件样式设置作用域。</li><li>尽量使用指令缩写。</li></ul>',7);var t={render:function(e,i){return r}}}}]);