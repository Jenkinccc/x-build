(self.webpackChunk=self.webpackChunk||[]).push([[3821],{6340:function(a,s,e){"use strict";e.r(s),e.d(s,{data:function(){return n}});const n={key:"v-0675db36",path:"/guide/http/request.html",title:"异步请求",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"接口定义",slug:"接口定义",children:[]},{level:2,title:"使用封装的 request.js 发送请求",slug:"使用封装的-request-js-发送请求",children:[]},{level:2,title:"配置接口地址",slug:"配置接口地址",children:[{level:3,title:"环境区分",slug:"环境区分",children:[]}]},{level:2,title:"响应拦截",slug:"响应拦截",children:[{level:3,title:"默认约定",slug:"默认约定",children:[]}]}],filePathRelative:"guide/http/request.md",git:{updatedTime:162484849e4,contributors:[]}}},803:function(a,s,e){"use strict";e.r(s),e.d(s,{default:function(){return u}});var n=e(6252);const t=(0,n.uE)('<h1 id="异步请求" tabindex="-1"><a class="header-anchor" href="#异步请求" aria-hidden="true">#</a> 异步请求</h1><h2 id="接口定义" tabindex="-1"><a class="header-anchor" href="#接口定义" aria-hidden="true">#</a> 接口定义</h2><ul><li>所有的接口应定义在 <code>@/api</code> 文件夹内。</li></ul><h2 id="使用封装的-request-js-发送请求" tabindex="-1"><a class="header-anchor" href="#使用封装的-request-js-发送请求" aria-hidden="true">#</a> 使用封装的 request.js 发送请求</h2>',4),r=(0,n.Uk)("@/libs/request.ts 是基于 "),l={href:"https://www.kancloud.cn/yunye/axios/234845",target:"_blank",rel:"noopener noreferrer"},p=(0,n.Uk)("axios"),i=(0,n.Uk)(" 的封装，便于统一处理 POST，GET 等请求参数，请求头，以及错误提示信息等。具体可以参看 request.ts 它封装了全局 request 拦截器、response 拦截器、统一的错误处理、baseURL 设置等。"),c=(0,n.uE)('<h2 id="配置接口地址" tabindex="-1"><a class="header-anchor" href="#配置接口地址" aria-hidden="true">#</a> 配置接口地址</h2><p>默认的请求地址在 .env</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">VUE_APP_API</span><span class="token operator">=</span>/api/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="环境区分" tabindex="-1"><a class="header-anchor" href="#环境区分" aria-hidden="true">#</a> 环境区分</h3><p>如果希望不同的环境使用不同的请求地址，可以在 .env.development 、.env.test 或 .env.production 中添加设置：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">VUE_APP_API</span><span class="token operator">=</span>/api-dev/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="响应拦截" tabindex="-1"><a class="header-anchor" href="#响应拦截" aria-hidden="true">#</a> 响应拦截</h2><p>在 @/libs/request.ts 中定义响应拦截。</p><h3 id="默认约定" tabindex="-1"><a class="header-anchor" href="#默认约定" aria-hidden="true">#</a> 默认约定</h3><p>默认设置下 response.data 的数据格式应为如下所示：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n  <span class="token comment">// 接口约定的状态码 非 http 状态码</span>\n  code<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token comment">// 接口返回请求状态信息</span>\n  msg<span class="token operator">:</span> <span class="token string">&#39;返回信息&#39;</span><span class="token punctuation">,</span>\n  <span class="token comment">// data 内才是真正的返回数据</span>\n  data<span class="token operator">:</span> <span class="token punctuation">{</span>\n    list<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token operator">...</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在响应拦截器中会对 http 状态码以及 response.data.code 进行判断，如果全部为正常将会返回 response.data.data，如果有错误将会触发日志记录和信息显示，如果是登录状态失效将自动清空本地的登录状态并退回到登录页面。所有的判断逻辑根据实际业务需要自行修改。</p>',12);var u={render:function(a,s){const e=(0,n.up)("OutboundLink");return(0,n.wg)(),(0,n.j4)(n.HY,null,[t,(0,n.Wm)("p",null,[r,(0,n.Wm)("a",l,[p,(0,n.Wm)(e)]),i]),c],64)}}}}]);